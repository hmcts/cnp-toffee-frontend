#!groovy

@Library("Infrastructure")

def type = "nodejs"
def product = "toffee"
def component = "frontend"

def secrets = [ 'toffeesi-${env}':
  [
    secret('appInsights-InstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY')
  ]
]

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

// Function to execute the pipeline with retries on specific error
def executeWithRetry(retries, closure) {
  for (int i = 0; i < retries; i++) {
    try {
      closure.call()
      break // Exit loop if successful
    } catch (Exception e) {
      if (e.message.contains("hudson.remoting.ChannelClosedException")) {
        echo "Encountered ChannelClosedException. Retrying... (Attempt ${i + 1} of ${retries})"
        sleep(time: 10, unit: 'SECONDS') // Optional: sleep between retries
      } else {
        throw e // Rethrow if it's a different exception
      }
    }
  }
}

executeWithRetry(3) {  // Retry the whole block up to 2 times if it fails
  withPipeline(type, product, component) {
    loadVaultSecrets(secrets)
    disableLegacyDeployment()

    afterAlways('build') {
      yarnBuilder.yarn('rebuild puppeteer')
      yarnBuilder.yarn('build')
    }
  }
}
